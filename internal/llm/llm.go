package llm

import (
	"context"
	"io"
)

// Role is an annotation attached to each message which describes who generated
// the message.
type Role struct{ role string }

var (
	// RoleUser is the role attached to messages from the user.
	RoleUser = Role{"user"}

	// RoleModel is the role attached to messages generated by the LLM.
	RoleModel = Role{"model"}

	// RoleSystem is the role attached to introductory system messages that define
	// the behavior of the LLM for the session. Implementations may treat this
	// equivalently to RoleUser if not supported.
	RoleSystem = Role{"system"}
)

type MessageMetadata struct {
	Role Role
}

// CompletionClient is the interface common to all LLMs.
type CompletionClient interface {
	// TODO: accept a context.
	// TODO: accept an io.Writer here instead, since implementations currently
	// have to start goroutines in order to return a reader.
	GetCompletion(ctx context.Context, messages []Message) (*Completion, error)
}

type Completion struct {
	io.ReadCloser
}

// Message represents a complete chat completion message buffered in memory.
type Message struct {
	Metadata MessageMetadata
	Payload  string
}
